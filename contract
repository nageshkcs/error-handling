// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AlcoholDetection {
    address public organizer;
    mapping(address => bool) private isParticipantAllowed;

    event ParticipantAllowed(address indexed participant);
    event AlcoholDetected(address indexed participant);

   
    constructor() {
        organizer = msg.sender;
    } 

    function calculateFine(uint256 number) external pure returns (uint256 fine) {
        // Use assert() to set the range from 1 to 10
        assert(number >= 1 && number <= 15);

        // Use require() to set the range from 4 to 8
        require(number >= 4 && number <= 8, "Fine not applicable");
        // Apply fine of 100
        fine = 100;
    }

    function isimprisonment(uint256 number) external pure returns (bool sendToJail) {
        // Use revert() to handle an exceptional case if the number is equal to 9
        if (number >= 9) {
            revert("Number greater than 9  detected: Sending to jail");
        }
        sendToJail = false;
    }

   
}
